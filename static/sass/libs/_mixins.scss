@mixin opacity($val)
{
    /* Netscape */
    -moz-opacity: $val;
    /* Safari 1.x */
    -khtml-opacity: $val;
    /* Good browsers */
    opacity: $val;
}
@mixin transform($params)
{
    -webkit-transform: $params;
    -moz-transform: $params;
    -o-transform: $params;
    -ms-transform: $params;
    transform: $params;
}
@mixin transition($params)
{
    -moz-transition: $params;
    -webkit-transition: $params;
    transition: $params;
}
@mixin box-sizing($method)
{
    -webkit-box-sizing: $method;
    -moz-box-sizing: $method;
    box-sizing: $method;
}
@mixin border-radius-top-lr($size)
{
    -webkit-border-top-left-radius: $size;
    -webkit-border-top-right-radius: $size;
    -moz-border-radius-topleft: $size;
    -moz-border-radius-topright: $size;
    border-top-left-radius: $size;
    border-top-right-radius: $size;
}
@mixin border-radius-left-tb($size)
{
    -webkit-border-top-left-radius: $size;
    -webkit-border-bottom-left-radius: $size;
    -moz-border-radius-topleft: $size;
    -moz-border-radius-bottomleft: $size;
    border-top-left-radius: $size;
    border-bottom-left-radius: $size;
}
@mixin border-radius($size)
{
    -webkit-border-radius: $size;
    -moz-border-radius: $size;
    border-radius: $size;
}
@mixin border-radius-top($size)
{
    -webkit-border-top-left-radius: $size;
    -webkit-border-top-right-radius: $size;
    -moz-border-radius-topleft: $size;
    -moz-border-radius-topright: $size;
    border-top-left-radius: $size;
    border-top-right-radius: $size;
}

@mixin box-shadow($params)
{
    -webkit-box-shadow: $params;
    -moz-box-shadow: $params;
    box-shadow: $params;
}

@mixin black-white($level)
{
    -webkit-filter: grayscale($level);
    filter: grayscale($level);
}
@mixin blur($radius)
{
    -webkit-filter: blur($radius);
    filter: blur($radius);
}


@mixin triangle-up($w, $h, $color)
{
    width: 0;
    height: 0;
    border-style: solid;
    border-width: 0 ($w/2) $h ($w/2);
    border-color: transparent transparent $color transparent;
}
@mixin triangle-left($w, $h, $color)
{
    width: 0;
    height: 0;
    border-style: solid;
    border-width: ($h/2) $w ($h/2) 0;
    border-color: transparent $color transparent transparent;
}
@mixin triangle-right($w, $h, $color)
{
    width: 0;
    height: 0;
    border-style: solid;
    border-width: ($h/2) 0 ($h/2) $w;
    border-color: transparent transparent transparent $color;
}
@mixin triangle-down($w, $h, $color)
{
    width: 0;
    height: 0;
    border-style: solid;
    border-width: $h ($w/2) 0 ($w/2);
    border-color: $color transparent transparent transparent;
}

@mixin block-overlay($color)
{
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: $color;
}

@mixin skel-breakpoints($x: ()) {
    $breakpoints: $x !global;
}

@mixin breakpoint($breakpoint: null, $queries: null) {

    $query: 'screen';

    // Breakpoint.
        @if $breakpoint and map-has-key($breakpoints, $breakpoint) {
            $query: $query + ' and ' + map-get($breakpoints, $breakpoint);
        }

    // Queries.
        @if $queries {
            @each $k, $v in $queries {
                $query: $query + ' and (' + $k + ':' + $v + ')';
            }
        }

    @media #{$query} {
        @content;
    }

}

/// Vendorizes a declaration's property and/or value(s).
/// @param {string} $property Property.
/// @param {mixed} $value String/list of value(s).
@mixin vendor($property, $value) {

    // Determine if property should expand.
        $expandProperty: index($vendor-properties, $property);

    // Determine if value should expand (and if so, add '-prefix-' placeholder).
        $expandValue: false;

        @each $x in $value {
            @each $y in $vendor-values {
                @if $y == str-slice($x, 1, str-length($y)) {

                    $value: set-nth($value, index($value, $x), '-prefix-' + $x);
                    $expandValue: true;

                }
            }
        }

    // Expand property?
        @if $expandProperty {
            @each $vendor in $vendor-prefixes {
                #{$vendor}#{$property}: #{str-replace-all($value, '-prefix-', $vendor)};
            }
        }

    // Expand just the value?
        @elseif $expandValue {
            @each $vendor in $vendor-prefixes {
                #{$property}: #{str-replace-all($value, '-prefix-', $vendor)};
            }
        }

    // Neither? Treat them as a normal declaration.
        @else {
            #{$property}: #{$value};
        }

}